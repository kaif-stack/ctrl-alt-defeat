# -*- coding: utf-8 -*-
"""Accidentpred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16nl8X4Z_mXy4g98C41xel2Ft6_2e3WLH
"""

import pandas as pd
import numpy as np
import seaborn as sns


sns.set_style("whitegrid")

df = pd.read_csv(r"C:\Users\kesha\OneDrive\Desktop\Folium\venv\heatmap\US_Accidents_Dec21_updated.csv")


east_Lng = -122.357968
west_Lng = -122.513293

north_Lat = 37.810520
south_Lat = 37.708041

dfSFstart = df.loc[(df['Start_Lat']>=south_Lat) & (df['Start_Lat'] <=north_Lat)&(df['Start_Lng']>=west_Lng) & (df['Start_Lng'] <=east_Lng)]
dfSFend = df.loc[(df['End_Lat']>=south_Lat) & (df['End_Lat'] <=north_Lat)&(df['End_Lng']>=west_Lng) & (df['End_Lng'] <=east_Lng)]
dfSF = pd.concat([dfSFstart,dfSFend])

dfFull = df
df = dfSF



df['Duration(H)']=(pd.to_datetime(df.End_Time)-pd.to_datetime(df.Start_Time)).astype('timedelta64[h]')

df["Duration(H)"].describe()

df = df.drop(columns = ["ID","Number","Street","Side","City","County","State","Zipcode","Country","Timezone","Airport_Code","Start_Lat","Start_Lng","End_Lat","End_Lng"])



df.isna().sum()

wind_mean_value=df['Wind_Chill(F)'].mean()
preci_mean_value = df['Precipitation(in)'].mean()
windsped_mean_value = df['Wind_Speed(mph)'].mean()

missing = df.isna().sum().sort_values(ascending = False) / len(df)


df['Wind_Chill(F)'].fillna(value=wind_mean_value, inplace=True)
df['Precipitation(in)'].fillna(value = preci_mean_value,inplace=True)
df['Wind_Speed(mph)'].fillna(value = windsped_mean_value,inplace=True)

missing = df.isna().sum().sort_values(ascending = False) / len(df)


df.isna().sum()

df.dropna(inplace=True)

df.isna().sum()

corr = df.corr()

heat = sns.heatmap(corr)



import folium 
from folium.plugins import HeatMap

# Too many data points slowing down map rendering so downsampling

sampling = dfFull.sample( int( 0.01 * len(dfFull)))
locations = zip(list(sampling.Start_Lat), list(sampling.Start_Lng))

"""heat map is an important aspect of this map

"""

map = folium.Map()
HeatMap(locations).add_to(map)
map
from flask import Flask, render_template_string
app = Flask(__name__)


@app.route("/")
def fullscreen():
    """Simple example of a fullscreen map."""
    m = map
    return m.get_root().render()


@app.route("/iframe")
def iframe():
    """Embed a map as an iframe on a page."""
    m = folium.Map(location=(49.25, -123.12))

    # set the iframe width and height
    m.get_root().width = "800px"
    m.get_root().height = "600px"
    iframe = m.get_root()._repr_html_()

    return render_template_string(
        """
            <!DOCTYPE html>
            <html>
                <head></head>
                <body>
                    <h1>Using an iframe</h1>
                    {{ iframe|safe }}
                </body>
            </html>
        """
        ,
        iframe=iframe,
    )


@app.route("/components")
def components():
    """Extract map components and put those on a page."""
    m = folium.Map(
        width=800,
        height=600,
    )

    m.get_root().render()
    header = m.get_root().header.render()
    body_html = m.get_root().html.render()
    script = m.get_root().script.render()

    return render_template_string(
        """
            <!DOCTYPE html>
            <html>
                <head>
                    {{ header|safe }}
                </head>
                <body>
                    <h1>Using components</h1>
                    {{ body_html|safe }}
                    <script>
                        {{ script|safe }}
                    </script>
                </body>
            </html>
        """,
        header=header,
        body_html=body_html,
        script=script,
    )


if __name__ == "__main__":
    app.run(debug=True)
